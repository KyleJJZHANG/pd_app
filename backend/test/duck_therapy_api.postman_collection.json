{
  "info": {
    "name": "Duck Therapy Chat API",
    "description": "Comprehensive test collection for Duck Therapy backend chat API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "description": "Backend server base URL"
    },
    {
      "key": "session_id",
      "value": "postman-test-session-{{$timestamp}}",
      "description": "Dynamic session ID for testing"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains status', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "Send Basic Message",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains message_id', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message_id');",
              "});",
              "",
              "pm.test('Response contains response_text', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('response_text');",
              "});",
              "",
              "pm.test('LLM providers used contains ollama', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.llm_providers_used).to.include('ollama');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": \"你好鸭鸭，我今天感觉很好！\",\n  \"session_id\": \"{{session_id}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat/message",
          "host": ["{{base_url}}"],
          "path": ["chat", "message"]
        }
      }
    },
    {
      "name": "Send Emotional Message",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains emotion analysis', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('emotion_analysis');",
              "});",
              "",
              "pm.test('Execution time is reasonable', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.execution_time_ms).to.be.below(30000); // Less than 30 seconds",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": \"我今天感觉很难过，工作压力很大，不知道该怎么办\",\n  \"session_id\": \"{{session_id}}\",\n  \"analysis_depth\": \"detailed\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat/message",
          "host": ["{{base_url}}"],
          "path": ["chat", "message"]
        }
      }
    },
    {
      "name": "Send Message with All Options",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains all expected fields', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message_id');",
              "    pm.expect(jsonData).to.have.property('response_text');",
              "    pm.expect(jsonData).to.have.property('workflow_executed');",
              "    pm.expect(jsonData).to.have.property('success_rate');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": \"鸭鸭，我需要一些建议来处理焦虑情绪\",\n  \"session_id\": \"{{session_id}}\",\n  \"context\": [\"我之前说过我工作压力大\", \"我经常感到焦虑\"],\n  \"user_preferences\": {\"tone\": \"gentle\", \"language\": \"chinese\"},\n  \"workflow_type\": \"basic_chat_flow\",\n  \"response_style\": \"detailed\",\n  \"analysis_depth\": \"detailed\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat/message",
          "host": ["{{base_url}}"],
          "path": ["chat", "message"]
        }
      }
    },
    {
      "name": "Get Session Info",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Session info contains expected fields', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('session_id');",
              "    pm.expect(jsonData).to.have.property('message_count');",
              "    pm.expect(jsonData).to.have.property('status');",
              "});",
              "",
              "pm.test('Message count is greater than 0', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message_count).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/session/{{session_id}}",
          "host": ["{{base_url}}"],
          "path": ["chat", "session", "{{session_id}}"]
        }
      }
    },
    {
      "name": "Get Session Messages",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains messages array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('messages');",
              "    pm.expect(jsonData.messages).to.be.an('array');",
              "});",
              "",
              "pm.test('Response contains pagination info', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total_count');",
              "    pm.expect(jsonData).to.have.property('offset');",
              "    pm.expect(jsonData).to.have.property('limit');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/session/{{session_id}}/messages?limit=10&offset=0",
          "host": ["{{base_url}}"],
          "path": ["chat", "session", "{{session_id}}", "messages"],
          "query": [
            {
              "key": "limit",
              "value": "10"
            },
            {
              "key": "offset",
              "value": "0"
            }
          ]
        }
      }
    },
    {
      "name": "Get Emotion History",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains emotion history', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('emotion_history');",
              "    pm.expect(jsonData.emotion_history).to.be.an('array');",
              "});",
              "",
              "pm.test('Response contains total entries count', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total_entries');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/session/{{session_id}}/emotion-history",
          "host": ["{{base_url}}"],
          "path": ["chat", "session", "{{session_id}}", "emotion-history"]
        }
      }
    },
    {
      "name": "List All Sessions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains sessions array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('sessions');",
              "    pm.expect(jsonData.sessions).to.be.an('array');",
              "});",
              "",
              "pm.test('Response contains pagination info', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total_count');",
              "    pm.expect(jsonData).to.have.property('offset');",
              "    pm.expect(jsonData).to.have.property('limit');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/sessions?limit=10&offset=0",
          "host": ["{{base_url}}"],
          "path": ["chat", "sessions"],
          "query": [
            {
              "key": "limit",
              "value": "10"
            },
            {
              "key": "offset",
              "value": "0"
            }
          ]
        }
      }
    },
    {
      "name": "Stream Message",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is server-sent events', function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
              "});",
              "",
              "pm.test('Response contains data stream', function () {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('data:');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": \"这是一个测试流式响应的消息\",\n  \"session_id\": \"stream-{{session_id}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat/stream",
          "host": ["{{base_url}}"],
          "path": ["chat", "stream"]
        }
      }
    },
    {
      "name": "Clear Session",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains success message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('cleared');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/session/{{session_id}}/clear",
          "host": ["{{base_url}}"],
          "path": ["chat", "session", "{{session_id}}", "clear"]
        }
      }
    },
    {
      "name": "Delete Session",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains success message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('deleted');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/session/{{session_id}}",
          "host": ["{{base_url}}"],
          "path": ["chat", "session", "{{session_id}}"]
        }
      }
    },
    {
      "name": "Non-existent Session (404 Error)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test('Error message indicates session not found', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "    pm.expect(jsonData.detail).to.include('not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/chat/session/non-existent-session-123",
          "host": ["{{base_url}}"],
          "path": ["chat", "session", "non-existent-session-123"]
        }
      }
    },
    {
      "name": "Empty Message (422 Validation Error)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 422', function () {",
              "    pm.response.to.have.status(422);",
              "});",
              "",
              "pm.test('Error indicates validation failure', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": \"\",\n  \"session_id\": \"error-test-session\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/chat/message",
          "host": ["{{base_url}}"],
          "path": ["chat", "message"]
        }
      }
    }
  ]
}